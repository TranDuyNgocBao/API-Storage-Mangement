<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="register-product-storage-suite.xml" />
	<munit:test name="post:\product:application\json:mule-product-api-config-success-test" doc:id="8476814e-f8f9-46ed-a781-3883929321c8" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="6b5a34c1-4c34-4922-ab93-e30db20d9694" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0398a583-4fda-482e-8d0c-b6d47ada8219" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\mock_variable_.dwl')]" />
						<munit-tools:variable key="productCode" value="#[output application/json --- readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="transactionId" value="#[output application/java --- readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Prepare Response" doc:id="3364d6d9-9039-4414-9ca3-63710e2d7537" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="388bae1b-b4ab-41f8-af15-4cf1c6b12070" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="9027c4af-fc7e-4141-b465-751ba00c8d04" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postproductapplicationjsonmuleproductapiconfigsuccesstest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
					<munit-tools:assert-equals doc:name="Assert equals" doc:id="f7a2877a-0240-41d2-82be-c83419667e1a" />
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="a5c7c2a9-b933-4697-a64f-5eedeb051be4" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postproductapplicationjsonmuleproductapiconfigsuccesstest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit-tools:spy doc:name="Spy Set Input Payload" doc:id="e8ca38ca-fe9e-4aaa-8854-91cff883872d" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0cbb5442-df50-4037-b7cf-b6a61ba0a943" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="288906ca-181c-485e-b77b-a87169c19cc4" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postproductapplicationjsonmuleproductapiconfigsuccesstest::spy_assert_payload2
---
spy_assert_payload2::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="284bbe2d-a152-44cb-bc43-46578f61904d" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postproductapplicationjsonmuleproductapiconfigsuccesstest::spy_assert_payload3
---
spy_assert_payload3::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="8e1d954a-a51f-4f2a-9571-6b9901a89e16" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\set-event_variable_.dwl')]" />
					<munit:variable key="transactionId" value="#[output application/java --- readUrl('classpath://postproductapplicationjsonmuleproductapiconfigsuccesstest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\product:application\json:mule-product-api-config" doc:id="86c12c8f-cae8-4f33-8c36-665d36cfb55e" name="post:\product:application\json:mule-product-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="0faa9ee2-ef43-44d1-a72a-7127b4b2b323" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postproductapplicationjsonmuleproductapiconfigsuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Prepare Response" doc:id="482111dc-79ec-421a-bc6b-238be1c5b581" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="388bae1b-b4ab-41f8-af15-4cf1c6b12070" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Set Input Payload" doc:id="64568c87-29d3-45dc-a244-10f4528f88aa" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0cbb5442-df50-4037-b7cf-b6a61ba0a943" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
