<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="order-create-suite.xml" />
	<munit:test name="post:\orders:application\json:mule-purchases-sapi-config-success-test" doc:id="2f485159-e36a-4b56-97a3-57d20fddb77b" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="f32d3e2c-b98b-47f2-b7d0-5a8541ced418" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a36f146e-2237-4fdf-a155-988eec7d2432" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\mock_variable_.dwl')]" />
						<munit-tools:variable key="orderNo" value="#[output application/json --- readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="transactionId" value="#[output application/java --- readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Set Input Payload" doc:id="33e0351a-97dc-4296-b45f-0293f539b69d" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6a7f3ba1-8c8f-490b-b050-b19b178470b3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="5699539d-4903-497e-85c7-6bbc8f7d5e12" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postordersapplicationjsonmulepurchasessapiconfigsuccesstest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="0914d66e-a5fe-4f85-b18e-226765305194" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postordersapplicationjsonmulepurchasessapiconfigsuccesstest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit-tools:spy doc:name="Spy Prepare Response" doc:id="05839367-01e9-48c5-a2b1-c9ca8931d61a" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f886caa5-67f7-471b-9d65-a8cde6caf1f9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="533c126d-5564-4fef-905c-f1718543dd0e" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postordersapplicationjsonmulepurchasessapiconfigsuccesstest::spy_assert_payload2
---
spy_assert_payload2::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="d63832c3-587b-43fb-8597-59beacbbe068" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import postordersapplicationjsonmulepurchasessapiconfigsuccesstest::spy_assert_payload3
---
spy_assert_payload3::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="d6cf41b5-420e-4f44-84e8-1604e5293386" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\set-event_variable_.dwl')]" />
					<munit:variable key="transactionId" value="#[output application/java --- readUrl('classpath://postordersapplicationjsonmulepurchasessapiconfigsuccesstest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\orders:application\json:mule-purchases-sapi-config" doc:id="729c8cbb-c2e7-41da-ba94-d054432ab4f4" name="post:\orders:application\json:mule-purchases-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="91a80116-455e-44b2-a00e-9296e088288d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postordersapplicationjsonmulepurchasessapiconfigsuccesstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Set Input Payload" doc:id="c4564e70-a2fb-48fc-a53a-7c7cb4ef9f2a" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6a7f3ba1-8c8f-490b-b050-b19b178470b3" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Prepare Response" doc:id="d69cc4bf-c137-45d2-9146-72c17555f6da" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="f886caa5-67f7-471b-9d65-a8cde6caf1f9" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
